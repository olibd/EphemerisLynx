using System;
using System.Text;
using Lynx.Core.Services.Communications.Packets;
using Lynx.Core.Services.Communications.Packets.Interfaces;
using Lynx.Core.Services.Crypto;
using Lynx.Core.Services.Crypto.Interfaces;
using Lynx.Core.Services.PeerVerification.Interfaces;

namespace Lynx.Core.Services.PeerVerification
{
    public class Verifier : IVerifier
    {
        private ITokenCryptoService<IHandshakeToken> _tokenCryptoService;

        public Verifier(ITokenCryptoService<IHandshakeToken> tokenCryptoService)
        {
            _tokenCryptoService = tokenCryptoService;
        }

        public ISyn Syn { get; set; }

        public void Acknowledge(string privateKey, string publicKey)
        {
            throw new NotImplementedException();
        }

        public ISyn ProcessSyn(string synString)
        {
            ISyn syn = new Syn(synString);
            //TODO: handle encrypted token
            if (_tokenCryptoService.Verify(syn, Encoding.UTF8.GetBytes(syn.PublicKey)))
                return syn;
            else
                throw new SignatureDoesntMatchException("The signature was not " +
                                                        "generated by the given " +
                                                        "public Key");
        }
    }
}
